
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003978  08003978  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004244  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200042b8  200042b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c41e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002305  00000000  00000000  0002c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f50  00000000  00000000  0002f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b111  00000000  00000000  00051920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c99ca  00000000  00000000  0005ca31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001263fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b00  00000000  00000000  00126450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003878 	.word	0x08003878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003878 	.word	0x08003878

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	200000e4 	.word	0x200000e4

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fa91 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f827 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f883 	bl	8000614 <MX_GPIO_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED1_Task */

  App_TaskHandle=xTaskCreateStatic(App_Start,
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <main+0x44>)
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x48>)
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2303      	movs	r3, #3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <main+0x4c>)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x50>)
 8000522:	f001 fee1 	bl	80022e8 <xTaskCreateStatic>
 8000526:	4603      	mov	r3, r0
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <main+0x54>)
 800052a:	6013      	str	r3, [r2, #0]
		  "AppTaskCreate", 128,
		  NULL, 3, AppStartStack, &AppTaskTCB);
  if(NULL!=App_TaskHandle)
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x54>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <main+0x3e>
  {
	  printf("ok!\n");
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x58>)
 8000536:	f002 fd47 	bl	8002fc8 <puts>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 800053a:	f002 f92d 	bl	8002798 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x42>
 8000540:	20004250 	.word	0x20004250
 8000544:	200002e4 	.word	0x200002e4
 8000548:	080038a8 	.word	0x080038a8
 800054c:	0800073d 	.word	0x0800073d
 8000550:	20004248 	.word	0x20004248
 8000554:	080038b8 	.word	0x080038b8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fcb8 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xb4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xb8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fd55 	bl	8001078 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d4:	f000 f8f4 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ffb8 	bl	8001568 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005fe:	f000 f8df 	bl	80007c0 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a30      	ldr	r2, [pc, #192]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <MX_GPIO_Init+0xe0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <MX_GPIO_Init+0xe0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xe0>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xe0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4815      	ldr	r0, [pc, #84]	; (80006f8 <MX_GPIO_Init+0xe4>)
 80006a2:	f000 fcb5 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_GPIO_Init+0xe8>)
 80006ac:	f000 fcb0 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0xe4>)
 80006ca:	f000 fb05 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_GPIO_Init+0xe8>)
 80006e6:	f000 faf7 	bl	8000cd8 <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020400 	.word	0x40020400

08000700 <LED1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LED1 */
void LED1(void const * argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f001 f92d 	bl	8001968 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800070e:	2102      	movs	r1, #2
 8000710:	4801      	ldr	r0, [pc, #4]	; (8000718 <LED1+0x18>)
 8000712:	f000 fc96 	bl	8001042 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000716:	e7f7      	b.n	8000708 <LED1+0x8>
 8000718:	40020400 	.word	0x40020400

0800071c <LED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED2 */
void LED2(void const * argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f001 f91e 	bl	8001968 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <LED2+0x1c>)
 8000732:	f000 fc86 	bl	8001042 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000736:	e7f5      	b.n	8000724 <LED2+0x8>
 8000738:	40020800 	.word	0x40020800

0800073c <App_Start>:
  }
  /* USER CODE END LED2 */
}

void App_Start(void const * argument)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 8000744:	f001 fcee 	bl	8002124 <vPortEnterCritical>

	  /* definition and creation of LED1_Task */
	osThreadDef(LED1_Task, LED1, osPriorityNormal, 0, 128);
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <App_Start+0x70>)
 800074a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED1_TaskHandle = osThreadCreate(osThread(LED1_Task), NULL);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f8b4 	bl	80018d0 <osThreadCreate>
 8000768:	4603      	mov	r3, r0
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <App_Start+0x74>)
 800076c:	6013      	str	r3, [r2, #0]
	{
		//printf("LED1任务创建成功!\n");
	}

	 /* definition and creation of LED2_Task */
	osThreadDef(LED2_Task, LED2, osPriorityIdle, 0, 128);
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <App_Start+0x78>)
 8000770:	f107 0408 	add.w	r4, r7, #8
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED2_TaskHandle = osThreadCreate(osThread(LED2_Task), NULL);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f8a1 	bl	80018d0 <osThreadCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <App_Start+0x7c>)
 8000792:	6013      	str	r3, [r2, #0]
	if(NULL!=LED2_TaskHandle)
	{
		//printf("LED2任务创建成功!\n");
	}

    vTaskDelete(App_TaskHandle);
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <App_Start+0x80>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f001 ff39 	bl	8002610 <vTaskDelete>
    taskEXIT_CRITICAL();
 800079e:	f001 fcf1 	bl	8002184 <vPortExitCritical>
}
 80007a2:	bf00      	nop
 80007a4:	3740      	adds	r7, #64	; 0x40
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	080038bc 	.word	0x080038bc
 80007b0:	2000424c 	.word	0x2000424c
 80007b4:	080038d8 	.word	0x080038d8
 80007b8:	20004244 	.word	0x20004244
 80007bc:	20004248 	.word	0x20004248

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x54>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_MspInit+0x54>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x54>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x54>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fa38 	bl	8000c86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f93a 	bl	8000acc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000858:	f002 fa92 	bl	8002d80 <xTaskGetSchedulerState>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d001      	beq.n	8000866 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000862:	f001 fcf1 	bl	8002248 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e00a      	b.n	8000892 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800087c:	f3af 8000 	nop.w
 8000880:	4601      	mov	r1, r0
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	60ba      	str	r2, [r7, #8]
 8000888:	b2ca      	uxtb	r2, r1
 800088a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbf0      	blt.n	800087c <_read+0x12>
	}

return len;
 800089a:	687b      	ldr	r3, [r7, #4]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e009      	b.n	80008ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbf1      	blt.n	80008b6 <_write+0x12>
	}
	return len;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_close>:

int _close(int file)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	return -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000904:	605a      	str	r2, [r3, #4]
	return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_isatty>:

int _isatty(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	return 1;
 800091c:	2301      	movs	r3, #1
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f002 fa88 	bl	8002e88 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20020000 	.word	0x20020000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200004e4 	.word	0x200004e4
 80009ac:	200042b8 	.word	0x200042b8

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f0:	4c0b      	ldr	r4, [pc, #44]	; (8000a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009fe:	f7ff ffd7 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f002 fa47 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fd79 	bl	80004fc <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a18:	08003980 	.word	0x08003980
  ldr r2, =_sbss
 8000a1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a20:	200042b8 	.word	0x200042b8

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f90d 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff feb6 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f917 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f8ed 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	200042a4 	.word	0x200042a4

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200042a4 	.word	0x200042a4

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff47 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5c 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e16b      	b.n	8000fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 815a 	bne.w	8000fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d005      	beq.n	8000d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d130      	bne.n	8000d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	f003 0201 	and.w	r2, r3, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d017      	beq.n	8000dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d123      	bne.n	8000e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	69b9      	ldr	r1, [r7, #24]
 8000e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0203 	and.w	r2, r3, #3
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80b4 	beq.w	8000fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <HAL_GPIO_Init+0x30c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a5f      	ldr	r2, [pc, #380]	; (8000fe4 <HAL_GPIO_Init+0x30c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b5d      	ldr	r3, [pc, #372]	; (8000fe4 <HAL_GPIO_Init+0x30c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a5b      	ldr	r2, [pc, #364]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x314>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d02b      	beq.n	8000efe <HAL_GPIO_Init+0x226>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <HAL_GPIO_Init+0x318>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d025      	beq.n	8000efa <HAL_GPIO_Init+0x222>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_GPIO_Init+0x31c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_GPIO_Init+0x21e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x320>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x21a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_GPIO_Init+0x324>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x216>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <HAL_GPIO_Init+0x328>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x212>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_GPIO_Init+0x32c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x20e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	; (8001008 <HAL_GPIO_Init+0x330>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x20a>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e00e      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	e00c      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00a      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000eea:	2305      	movs	r3, #5
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x228>
 8000efe:	2300      	movs	r3, #0
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f10:	4935      	ldr	r1, [pc, #212]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <HAL_GPIO_Init+0x334>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f ae90 	bls.w	8000cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40021400 	.word	0x40021400
 8001004:	40021800 	.word	0x40021800
 8001008:	40021c00 	.word	0x40021c00
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	041a      	lsls	r2, r3, #16
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43d9      	mvns	r1, r3
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	400b      	ands	r3, r1
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e264      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d075      	beq.n	8001182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	4ba3      	ldr	r3, [pc, #652]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d00c      	beq.n	80010bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d112      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ba:	d10b      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4b99      	ldr	r3, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05b      	beq.n	8001180 <HAL_RCC_OscConfig+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e23f      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x74>
 80010de:	4b91      	ldr	r3, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a90      	ldr	r2, [pc, #576]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e01d      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a87      	ldr	r2, [pc, #540]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 8001110:	4b84      	ldr	r3, [pc, #528]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a83      	ldr	r2, [pc, #524]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a80      	ldr	r2, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fce0 	bl	8000af4 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fcdc 	bl	8000af4 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e204      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xc0>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fccc 	bl	8000af4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fcc8 	bl	8000af4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1f0      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0xe8>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d11c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e1c4      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4952      	ldr	r1, [pc, #328]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e03a      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc81 	bl	8000af4 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc7d 	bl	8000af4 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1a5      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4940      	ldr	r1, [pc, #256]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fc60 	bl	8000af4 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fc5c 	bl	8000af4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e184      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d030      	beq.n	80012c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d016      	beq.n	8001298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fc40 	bl	8000af4 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fc3c 	bl	8000af4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e164      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x200>
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc29 	bl	8000af4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc25 	bl	8000af4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e14d      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a0 	beq.w	8001412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d121      	bne.n	8001352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fbeb 	bl	8000af4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e011      	b.n	8001346 <HAL_RCC_OscConfig+0x2ce>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	42470000 	.word	0x42470000
 800132c:	42470e80 	.word	0x42470e80
 8001330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff fbde 	bl	8000af4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e106      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x4e4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f0>
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	e01c      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x312>
 8001370:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	4b78      	ldr	r3, [pc, #480]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a77      	ldr	r2, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	; 0x70
 8001396:	4b72      	ldr	r3, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a71      	ldr	r2, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fba3 	bl	8000af4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fb9f 	bl	8000af4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0c5      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ee      	beq.n	80013b2 <HAL_RCC_OscConfig+0x33a>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb8d 	bl	8000af4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fb89 	bl	8000af4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0af      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a55      	ldr	r2, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 809b 	beq.w	8001552 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d05c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d141      	bne.n	80014b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_RCC_OscConfig+0x4ec>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb5d 	bl	8000af4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb59 	bl	8000af4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e081      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	019b      	lsls	r3, r3, #6
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	3b01      	subs	r3, #1
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	061b      	lsls	r3, r3, #24
 8001480:	4937      	ldr	r1, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_RCC_OscConfig+0x4ec>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb32 	bl	8000af4 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fb2e 	bl	8000af4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e056      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x41c>
 80014b2:	e04e      	b.n	8001552 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb1b 	bl	8000af4 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb17 	bl	8000af4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03f      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x44a>
 80014e0:	e037      	b.n	8001552 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e032      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d028      	beq.n	800154e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d121      	bne.n	800154e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d11a      	bne.n	800154e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151e:	4013      	ands	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001524:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001526:	4293      	cmp	r3, r2
 8001528:	d111      	bne.n	800154e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	3b01      	subs	r3, #1
 8001538:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d107      	bne.n	800154e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40007000 	.word	0x40007000
 8001560:	40023800 	.word	0x40023800
 8001564:	42470060 	.word	0x42470060

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fa4c 	bl	8000af4 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fa48 	bl	8000af4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f821 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f9ac 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	080038fc 	.word	0x080038fc
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800173a:	2100      	movs	r1, #0
 800173c:	6079      	str	r1, [r7, #4]
 800173e:	2100      	movs	r1, #0
 8001740:	60f9      	str	r1, [r7, #12]
 8001742:	2100      	movs	r1, #0
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001746:	2100      	movs	r1, #0
 8001748:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174a:	4952      	ldr	r1, [pc, #328]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 800174c:	6889      	ldr	r1, [r1, #8]
 800174e:	f001 010c 	and.w	r1, r1, #12
 8001752:	2908      	cmp	r1, #8
 8001754:	d00d      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x3e>
 8001756:	2908      	cmp	r1, #8
 8001758:	f200 8094 	bhi.w	8001884 <HAL_RCC_GetSysClockFreq+0x150>
 800175c:	2900      	cmp	r1, #0
 800175e:	d002      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x32>
 8001760:	2904      	cmp	r1, #4
 8001762:	d003      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x38>
 8001764:	e08e      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_GetSysClockFreq+0x164>)
 8001768:	60bb      	str	r3, [r7, #8]
       break;
 800176a:	e08e      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_GetSysClockFreq+0x168>)
 800176e:	60bb      	str	r3, [r7, #8]
      break;
 8001770:	e08b      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001772:	4948      	ldr	r1, [pc, #288]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 8001774:	6849      	ldr	r1, [r1, #4]
 8001776:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800177a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177c:	4945      	ldr	r1, [pc, #276]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 800177e:	6849      	ldr	r1, [r1, #4]
 8001780:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001784:	2900      	cmp	r1, #0
 8001786:	d024      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4942      	ldr	r1, [pc, #264]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 800178a:	6849      	ldr	r1, [r1, #4]
 800178c:	0989      	lsrs	r1, r1, #6
 800178e:	4608      	mov	r0, r1
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001798:	f04f 0500 	mov.w	r5, #0
 800179c:	ea00 0204 	and.w	r2, r0, r4
 80017a0:	ea01 0305 	and.w	r3, r1, r5
 80017a4:	493d      	ldr	r1, [pc, #244]	; (800189c <HAL_RCC_GetSysClockFreq+0x168>)
 80017a6:	fb01 f003 	mul.w	r0, r1, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	fb01 f102 	mul.w	r1, r1, r2
 80017b0:	1844      	adds	r4, r0, r1
 80017b2:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_RCC_GetSysClockFreq+0x168>)
 80017b4:	fba2 0101 	umull	r0, r1, r2, r1
 80017b8:	1863      	adds	r3, r4, r1
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f7fe fd04 	bl	80001d0 <__aeabi_uldivmod>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e04a      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	461a      	mov	r2, r3
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	ea02 0400 	and.w	r4, r2, r0
 80017ea:	ea03 0501 	and.w	r5, r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	014b      	lsls	r3, r1, #5
 80017fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001800:	0142      	lsls	r2, r0, #5
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	1b00      	subs	r0, r0, r4
 8001808:	eb61 0105 	sbc.w	r1, r1, r5
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	018b      	lsls	r3, r1, #6
 8001816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800181a:	0182      	lsls	r2, r0, #6
 800181c:	1a12      	subs	r2, r2, r0
 800181e:	eb63 0301 	sbc.w	r3, r3, r1
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	00d9      	lsls	r1, r3, #3
 800182c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001830:	00d0      	lsls	r0, r2, #3
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	1912      	adds	r2, r2, r4
 8001838:	eb45 0303 	adc.w	r3, r5, r3
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	0299      	lsls	r1, r3, #10
 8001846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800184a:	0290      	lsls	r0, r2, #10
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f7fe fcb8 	bl	80001d0 <__aeabi_uldivmod>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4613      	mov	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_GetSysClockFreq+0x160>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	3301      	adds	r3, #1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	60bb      	str	r3, [r7, #8]
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RCC_GetSysClockFreq+0x164>)
 8001886:	60bb      	str	r3, [r7, #8]
      break;
 8001888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188a:	68bb      	ldr	r3, [r7, #8]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bdb0      	pop	{r4, r5, r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	00f42400 	.word	0x00f42400
 800189c:	017d7840 	.word	0x017d7840

080018a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b2:	2b84      	cmp	r3, #132	; 0x84
 80018b4:	d005      	beq.n	80018c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80018b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	3303      	adds	r3, #3
 80018c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d020      	beq.n	8001924 <osThreadCreate+0x54>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685c      	ldr	r4, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691e      	ldr	r6, [r3, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffcf 	bl	80018a0 <makeFreeRtosPriority>
 8001902:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800190c:	9202      	str	r2, [sp, #8]
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	9100      	str	r1, [sp, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4632      	mov	r2, r6
 8001916:	4629      	mov	r1, r5
 8001918:	4620      	mov	r0, r4
 800191a:	f000 fce5 	bl	80022e8 <xTaskCreateStatic>
 800191e:	4603      	mov	r3, r0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e01c      	b.n	800195e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685c      	ldr	r4, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001930:	b29e      	uxth	r6, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ffb1 	bl	80018a0 <makeFreeRtosPriority>
 800193e:	4602      	mov	r2, r0
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	9200      	str	r2, [sp, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4632      	mov	r2, r6
 800194c:	4629      	mov	r1, r5
 800194e:	4620      	mov	r0, r4
 8001950:	f000 fd27 	bl	80023a2 <xTaskCreate>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001968 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <osDelay+0x16>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	e000      	b.n	8001980 <osDelay+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fed5 	bl	8002730 <vTaskDelay>
  
  return osOK;
 8001986:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800199c:	f000 ff5c 	bl	8002858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <pvPortMalloc+0x180>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80019a8:	f000 f920 	bl	8001bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <pvPortMalloc+0x184>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8093 	bne.w	8001ae0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01d      	beq.n	80019fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80019c0:	2208      	movs	r2, #8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d014      	beq.n	80019fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f023 0307 	bic.w	r3, r3, #7
 80019d8:	3308      	adds	r3, #8
 80019da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06e      	beq.n	8001ae0 <pvPortMalloc+0x150>
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <pvPortMalloc+0x188>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d869      	bhi.n	8001ae0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <pvPortMalloc+0x18c>)
 8001a0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <pvPortMalloc+0x18c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a16:	e004      	b.n	8001a22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d903      	bls.n	8001a34 <pvPortMalloc+0xa4>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f1      	bne.n	8001a18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <pvPortMalloc+0x180>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d050      	beq.n	8001ae0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2208      	movs	r2, #8
 8001a44:	4413      	add	r3, r2
 8001a46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	2308      	movs	r3, #8
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d91f      	bls.n	8001aa0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <pvPortMalloc+0xf8>
	__asm volatile
 8001a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a76:	f383 8811 	msr	BASEPRI, r3
 8001a7a:	f3bf 8f6f 	isb	sy
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	613b      	str	r3, [r7, #16]
}
 8001a84:	bf00      	nop
 8001a86:	e7fe      	b.n	8001a86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a9a:	69b8      	ldr	r0, [r7, #24]
 8001a9c:	f000 f908 	bl	8001cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <pvPortMalloc+0x188>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <pvPortMalloc+0x188>)
 8001aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <pvPortMalloc+0x188>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <pvPortMalloc+0x190>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d203      	bcs.n	8001ac2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <pvPortMalloc+0x188>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <pvPortMalloc+0x190>)
 8001ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <pvPortMalloc+0x184>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <pvPortMalloc+0x194>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <pvPortMalloc+0x194>)
 8001ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ae0:	f000 fec8 	bl	8002874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <pvPortMalloc+0x174>
	__asm volatile
 8001aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	60fb      	str	r3, [r7, #12]
}
 8001b00:	bf00      	nop
 8001b02:	e7fe      	b.n	8001b02 <pvPortMalloc+0x172>
	return pvReturn;
 8001b04:	69fb      	ldr	r3, [r7, #28]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200040f0 	.word	0x200040f0
 8001b14:	20004104 	.word	0x20004104
 8001b18:	200040f4 	.word	0x200040f4
 8001b1c:	200040e8 	.word	0x200040e8
 8001b20:	200040f8 	.word	0x200040f8
 8001b24:	200040fc 	.word	0x200040fc

08001b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d04d      	beq.n	8001bd6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <vPortFree+0xb8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <vPortFree+0x44>
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	60fb      	str	r3, [r7, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00a      	beq.n	8001b8a <vPortFree+0x62>
	__asm volatile
 8001b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b78:	f383 8811 	msr	BASEPRI, r3
 8001b7c:	f3bf 8f6f 	isb	sy
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	60bb      	str	r3, [r7, #8]
}
 8001b86:	bf00      	nop
 8001b88:	e7fe      	b.n	8001b88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <vPortFree+0xb8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01e      	beq.n	8001bd6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <vPortFree+0xb8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001bb0:	f000 fe52 	bl	8002858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <vPortFree+0xbc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <vPortFree+0xbc>)
 8001bc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001bc2:	6938      	ldr	r0, [r7, #16]
 8001bc4:	f000 f874 	bl	8001cb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <vPortFree+0xc0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <vPortFree+0xc0>)
 8001bd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001bd2:	f000 fe4f 	bl	8002874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20004104 	.word	0x20004104
 8001be4:	200040f4 	.word	0x200040f4
 8001be8:	20004100 	.word	0x20004100

08001bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001bf2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <prvHeapInit+0xac>)
 8001bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00c      	beq.n	8001c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3307      	adds	r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <prvHeapInit+0xac>)
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <prvHeapInit+0xb0>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <prvHeapInit+0xb0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c38:	2208      	movs	r2, #8
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0307 	bic.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <prvHeapInit+0xb8>)
 8001c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <prvHeapInit+0xbc>)
 8001c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <prvHeapInit+0xc0>)
 8001c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200004e8 	.word	0x200004e8
 8001c9c:	200040e8 	.word	0x200040e8
 8001ca0:	200040f0 	.word	0x200040f0
 8001ca4:	200040f8 	.word	0x200040f8
 8001ca8:	200040f4 	.word	0x200040f4
 8001cac:	20004104 	.word	0x20004104

08001cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <prvInsertBlockIntoFreeList+0xac>)
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e002      	b.n	8001cc4 <prvInsertBlockIntoFreeList+0x14>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d8f7      	bhi.n	8001cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d108      	bne.n	8001cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d118      	bne.n	8001d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <prvInsertBlockIntoFreeList+0xb0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d00d      	beq.n	8001d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e008      	b.n	8001d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <prvInsertBlockIntoFreeList+0xb0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e003      	b.n	8001d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d002      	beq.n	8001d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200040e8 	.word	0x200040e8
 8001d60:	200040f0 	.word	0x200040f0

08001d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f103 0208 	add.w	r2, r3, #8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0208 	add.w	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d103      	bne.n	8001e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e00c      	b.n	8001e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3308      	adds	r3, #8
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e002      	b.n	8001e34 <vListInsert+0x2e>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d2f6      	bcs.n	8001e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6892      	ldr	r2, [r2, #8]
 8001e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6852      	ldr	r2, [r2, #4]
 8001e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d103      	bne.n	8001eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b04      	subs	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b04      	subs	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f023 0201 	bic.w	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <pxPortInitialiseStack+0x64>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b14      	subs	r3, #20
 8001f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b04      	subs	r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f06f 0202 	mvn.w	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b20      	subs	r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	08001f35 	.word	0x08001f35

08001f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <prvTaskExitError+0x54>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d00a      	beq.n	8001f5e <prvTaskExitError+0x2a>
	__asm volatile
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	60fb      	str	r3, [r7, #12]
}
 8001f5a:	bf00      	nop
 8001f5c:	e7fe      	b.n	8001f5c <prvTaskExitError+0x28>
	__asm volatile
 8001f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f62:	f383 8811 	msr	BASEPRI, r3
 8001f66:	f3bf 8f6f 	isb	sy
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	60bb      	str	r3, [r7, #8]
}
 8001f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f72:	bf00      	nop
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0fc      	beq.n	8001f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	2000000c 	.word	0x2000000c
 8001f8c:	00000000 	.word	0x00000000

08001f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <pxCurrentTCBConst2>)
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	6808      	ldr	r0, [r1, #0]
 8001f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9a:	f380 8809 	msr	PSP, r0
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f380 8811 	msr	BASEPRI, r0
 8001faa:	4770      	bx	lr
 8001fac:	f3af 8000 	nop.w

08001fb0 <pxCurrentTCBConst2>:
 8001fb0:	20004110 	.word	0x20004110
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop

08001fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <prvPortStartFirstTask+0x24>)
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	6800      	ldr	r0, [r0, #0]
 8001fbe:	f380 8808 	msr	MSP, r0
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f380 8814 	msr	CONTROL, r0
 8001fca:	b662      	cpsie	i
 8001fcc:	b661      	cpsie	f
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	df00      	svc	0
 8001fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001fda:	bf00      	nop
 8001fdc:	e000ed08 	.word	0xe000ed08

08001fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <xPortStartScheduler+0x120>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a46      	ldr	r2, [pc, #280]	; (8002104 <xPortStartScheduler+0x124>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10a      	bne.n	8002006 <xPortStartScheduler+0x26>
	__asm volatile
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	613b      	str	r3, [r7, #16]
}
 8002002:	bf00      	nop
 8002004:	e7fe      	b.n	8002004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <xPortStartScheduler+0x120>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <xPortStartScheduler+0x128>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d10a      	bne.n	8002026 <xPortStartScheduler+0x46>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	60fb      	str	r3, [r7, #12]
}
 8002022:	bf00      	nop
 8002024:	e7fe      	b.n	8002024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <xPortStartScheduler+0x12c>)
 8002028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <xPortStartScheduler+0x130>)
 800204c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800204e:	4b31      	ldr	r3, [pc, #196]	; (8002114 <xPortStartScheduler+0x134>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002054:	e009      	b.n	800206a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <xPortStartScheduler+0x134>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <xPortStartScheduler+0x134>)
 800205e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b80      	cmp	r3, #128	; 0x80
 8002074:	d0ef      	beq.n	8002056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <xPortStartScheduler+0x134>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	d00a      	beq.n	8002098 <xPortStartScheduler+0xb8>
	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	60bb      	str	r3, [r7, #8]
}
 8002094:	bf00      	nop
 8002096:	e7fe      	b.n	8002096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <xPortStartScheduler+0x134>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <xPortStartScheduler+0x134>)
 80020a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <xPortStartScheduler+0x134>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <xPortStartScheduler+0x134>)
 80020ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <xPortStartScheduler+0x138>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <xPortStartScheduler+0x138>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <xPortStartScheduler+0x138>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <xPortStartScheduler+0x138>)
 80020c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80020cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80020ce:	f000 f8dd 	bl	800228c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <xPortStartScheduler+0x13c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80020d8:	f000 f8fc 	bl	80022d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <xPortStartScheduler+0x140>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <xPortStartScheduler+0x140>)
 80020e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80020e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80020e8:	f7ff ff66 	bl	8001fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80020ec:	f000 fd16 	bl	8002b1c <vTaskSwitchContext>
	prvTaskExitError();
 80020f0:	f7ff ff20 	bl	8001f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00
 8002104:	410fc271 	.word	0x410fc271
 8002108:	410fc270 	.word	0x410fc270
 800210c:	e000e400 	.word	0xe000e400
 8002110:	20004108 	.word	0x20004108
 8002114:	2000410c 	.word	0x2000410c
 8002118:	e000ed20 	.word	0xe000ed20
 800211c:	2000000c 	.word	0x2000000c
 8002120:	e000ef34 	.word	0xe000ef34

08002124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
	__asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	607b      	str	r3, [r7, #4]
}
 800213c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <vPortEnterCritical+0x58>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <vPortEnterCritical+0x58>)
 8002146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <vPortEnterCritical+0x58>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10f      	bne.n	8002170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <vPortEnterCritical+0x5c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <vPortEnterCritical+0x4c>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	603b      	str	r3, [r7, #0]
}
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <vPortEnterCritical+0x4a>
	}
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	2000000c 	.word	0x2000000c
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <vPortExitCritical+0x50>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <vPortExitCritical+0x24>
	__asm volatile
 8002192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	607b      	str	r3, [r7, #4]
}
 80021a4:	bf00      	nop
 80021a6:	e7fe      	b.n	80021a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <vPortExitCritical+0x50>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <vPortExitCritical+0x50>)
 80021b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <vPortExitCritical+0x50>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <vPortExitCritical+0x42>
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80021c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c
	...

080021e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80021e0:	f3ef 8009 	mrs	r0, PSP
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <pxCurrentTCBConst>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f01e 0f10 	tst.w	lr, #16
 80021f0:	bf08      	it	eq
 80021f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002204:	f380 8811 	msr	BASEPRI, r0
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f000 fc84 	bl	8002b1c <vTaskSwitchContext>
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f380 8811 	msr	BASEPRI, r0
 800221c:	bc09      	pop	{r0, r3}
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	6808      	ldr	r0, [r1, #0]
 8002222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002226:	f01e 0f10 	tst.w	lr, #16
 800222a:	bf08      	it	eq
 800222c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002230:	f380 8809 	msr	PSP, r0
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	f3af 8000 	nop.w

08002240 <pxCurrentTCBConst>:
 8002240:	20004110 	.word	0x20004110
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop

08002248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
	__asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	607b      	str	r3, [r7, #4]
}
 8002260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002262:	f000 fba3 	bl	80029ac <xTaskIncrementTick>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <xPortSysTickHandler+0x40>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f383 8811 	msr	BASEPRI, r3
}
 800227e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <vPortSetupTimerInterrupt+0x34>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <vPortSetupTimerInterrupt+0x38>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <vPortSetupTimerInterrupt+0x3c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <vPortSetupTimerInterrupt+0x40>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	099b      	lsrs	r3, r3, #6
 80022a8:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <vPortSetupTimerInterrupt+0x44>)
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <vPortSetupTimerInterrupt+0x34>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010
 80022c4:	e000e018 	.word	0xe000e018
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3
 80022d0:	e000e014 	.word	0xe000e014

080022d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80022d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80022e4 <vPortEnableVFP+0x10>
 80022d8:	6801      	ldr	r1, [r0, #0]
 80022da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022de:	6001      	str	r1, [r0, #0]
 80022e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80022e2:	bf00      	nop
 80022e4:	e000ed88 	.word	0xe000ed88

080022e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	623b      	str	r3, [r7, #32]
}
 800230e:	bf00      	nop
 8002310:	e7fe      	b.n	8002310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <xTaskCreateStatic+0x46>
	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	61fb      	str	r3, [r7, #28]
}
 800232a:	bf00      	nop
 800232c:	e7fe      	b.n	800232c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800232e:	2354      	movs	r3, #84	; 0x54
 8002330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b54      	cmp	r3, #84	; 0x54
 8002336:	d00a      	beq.n	800234e <xTaskCreateStatic+0x66>
	__asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	61bb      	str	r3, [r7, #24]
}
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800234e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01e      	beq.n	8002394 <xTaskCreateStatic+0xac>
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800236e:	2300      	movs	r3, #0
 8002370:	9303      	str	r3, [sp, #12]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	9302      	str	r3, [sp, #8]
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f850 	bl	800242c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800238c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800238e:	f000 f8d5 	bl	800253c <prvAddNewTaskToReadyList>
 8002392:	e001      	b.n	8002398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002398:	697b      	ldr	r3, [r7, #20]
	}
 800239a:	4618      	mov	r0, r3
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b08c      	sub	sp, #48	; 0x30
 80023a6:	af04      	add	r7, sp, #16
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff faea 	bl	8001990 <pvPortMalloc>
 80023bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023c4:	2054      	movs	r0, #84	; 0x54
 80023c6:	f7ff fae3 	bl	8001990 <pvPortMalloc>
 80023ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
 80023d8:	e005      	b.n	80023e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff fba4 	bl	8001b28 <vPortFree>
 80023e0:	e001      	b.n	80023e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f80e 	bl	800242c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002410:	69f8      	ldr	r0, [r7, #28]
 8002412:	f000 f893 	bl	800253c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e002      	b.n	8002422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002422:	69bb      	ldr	r3, [r7, #24]
	}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002444:	3b01      	subs	r3, #1
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <prvInitialiseNewTask+0x48>
	__asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	617b      	str	r3, [r7, #20]
}
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01f      	beq.n	80024ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e012      	b.n	80024a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	7819      	ldrb	r1, [r3, #0]
 8002488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	3334      	adds	r3, #52	; 0x34
 8002490:	460a      	mov	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d9e9      	bls.n	8002480 <prvInitialiseNewTask+0x54>
 80024ac:	e000      	b.n	80024b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80024ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b8:	e003      	b.n	80024c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d901      	bls.n	80024cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024c8:	2306      	movs	r3, #6
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	2200      	movs	r2, #0
 80024dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	3304      	adds	r3, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fc5e 	bl	8001da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	3318      	adds	r3, #24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fc59 	bl	8001da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	f1c3 0207 	rsb	r2, r3, #7
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	2200      	movs	r2, #0
 800250c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	69b8      	ldr	r0, [r7, #24]
 800251c:	f7ff fcd6 	bl	8001ecc <pxPortInitialiseStack>
 8002520:	4602      	mov	r2, r0
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002544:	f7ff fdee 	bl	8002124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <prvAddNewTaskToReadyList+0xb8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <prvAddNewTaskToReadyList+0xb8>)
 8002550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <prvAddNewTaskToReadyList+0xbc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800255a:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <prvAddNewTaskToReadyList+0xbc>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <prvAddNewTaskToReadyList+0xb8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d110      	bne.n	800258a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002568:	f000 fb4c 	bl	8002c04 <prvInitialiseTaskLists>
 800256c:	e00d      	b.n	800258a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <prvAddNewTaskToReadyList+0xc0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <prvAddNewTaskToReadyList+0xbc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d802      	bhi.n	800258a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <prvAddNewTaskToReadyList+0xbc>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <prvAddNewTaskToReadyList+0xc4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <prvAddNewTaskToReadyList+0xc4>)
 8002592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <prvAddNewTaskToReadyList+0xc8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <prvAddNewTaskToReadyList+0xc8>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <prvAddNewTaskToReadyList+0xcc>)
 80025b4:	441a      	add	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7ff fbfe 	bl	8001dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025c2:	f7ff fddf 	bl	8002184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <prvAddNewTaskToReadyList+0xc0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00e      	beq.n	80025ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <prvAddNewTaskToReadyList+0xbc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <prvAddNewTaskToReadyList+0xd0>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20004210 	.word	0x20004210
 80025f8:	20004110 	.word	0x20004110
 80025fc:	2000421c 	.word	0x2000421c
 8002600:	2000422c 	.word	0x2000422c
 8002604:	20004218 	.word	0x20004218
 8002608:	20004114 	.word	0x20004114
 800260c:	e000ed04 	.word	0xe000ed04

08002610 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002618:	f7ff fd84 	bl	8002124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <vTaskDelete+0x18>
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <vTaskDelete+0xf8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e000      	b.n	800262a <vTaskDelete+0x1a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3304      	adds	r3, #4
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fc21 	bl	8001e78 <uxListRemove>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	4932      	ldr	r1, [pc, #200]	; (800270c <vTaskDelete+0xfc>)
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <vTaskDelete+0x58>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <vTaskDelete+0x100>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4013      	ands	r3, r2
 8002664:	4a2a      	ldr	r2, [pc, #168]	; (8002710 <vTaskDelete+0x100>)
 8002666:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3318      	adds	r3, #24
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fbff 	bl	8001e78 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <vTaskDelete+0x104>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <vTaskDelete+0x104>)
 8002682:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002684:	4b20      	ldr	r3, [pc, #128]	; (8002708 <vTaskDelete+0xf8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d10b      	bne.n	80026a6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3304      	adds	r3, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4820      	ldr	r0, [pc, #128]	; (8002718 <vTaskDelete+0x108>)
 8002696:	f7ff fb92 	bl	8001dbe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <vTaskDelete+0x10c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <vTaskDelete+0x10c>)
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e009      	b.n	80026ba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <vTaskDelete+0x110>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <vTaskDelete+0x110>)
 80026ae:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fb15 	bl	8002ce0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80026b6:	f000 fb43 	bl	8002d40 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80026ba:	f7ff fd63 	bl	8002184 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <vTaskDelete+0x114>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01b      	beq.n	80026fe <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <vTaskDelete+0xf8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d116      	bne.n	80026fe <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <vTaskDelete+0x118>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <vTaskDelete+0xde>
	__asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	60bb      	str	r3, [r7, #8]
}
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <vTaskDelete+0x11c>)
 80026f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20004110 	.word	0x20004110
 800270c:	20004114 	.word	0x20004114
 8002710:	20004218 	.word	0x20004218
 8002714:	2000422c 	.word	0x2000422c
 8002718:	200041e4 	.word	0x200041e4
 800271c:	200041f8 	.word	0x200041f8
 8002720:	20004210 	.word	0x20004210
 8002724:	2000421c 	.word	0x2000421c
 8002728:	20004238 	.word	0x20004238
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d017      	beq.n	8002772 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <vTaskDelay+0x60>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <vTaskDelay+0x30>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	60bb      	str	r3, [r7, #8]
}
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002760:	f000 f87a 	bl	8002858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002764:	2100      	movs	r1, #0
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fb28 	bl	8002dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800276c:	f000 f882 	bl	8002874 <xTaskResumeAll>
 8002770:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <vTaskDelay+0x64>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20004238 	.word	0x20004238
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027a6:	463a      	mov	r2, r7
 80027a8:	1d39      	adds	r1, r7, #4
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fe8a 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	9202      	str	r2, [sp, #8]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	2300      	movs	r3, #0
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	460a      	mov	r2, r1
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <vTaskStartScheduler+0xa8>)
 80027c8:	481e      	ldr	r0, [pc, #120]	; (8002844 <vTaskStartScheduler+0xac>)
 80027ca:	f7ff fd8d 	bl	80022e8 <xTaskCreateStatic>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <vTaskStartScheduler+0xb0>)
 80027d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <vTaskStartScheduler+0xb0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027dc:	2301      	movs	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e001      	b.n	80027e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d116      	bne.n	800281a <vTaskStartScheduler+0x82>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	613b      	str	r3, [r7, #16]
}
 80027fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <vTaskStartScheduler+0xb4>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <vTaskStartScheduler+0xb8>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <vTaskStartScheduler+0xbc>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002814:	f7ff fbe4 	bl	8001fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002818:	e00e      	b.n	8002838 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d10a      	bne.n	8002838 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	60fb      	str	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	e7fe      	b.n	8002836 <vTaskStartScheduler+0x9e>
}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	080038f4 	.word	0x080038f4
 8002844:	08002bd5 	.word	0x08002bd5
 8002848:	20004234 	.word	0x20004234
 800284c:	20004230 	.word	0x20004230
 8002850:	2000421c 	.word	0x2000421c
 8002854:	20004214 	.word	0x20004214

08002858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <vTaskSuspendAll+0x18>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a03      	ldr	r2, [pc, #12]	; (8002870 <vTaskSuspendAll+0x18>)
 8002864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20004238 	.word	0x20004238

08002874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <xTaskResumeAll+0x114>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	603b      	str	r3, [r7, #0]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028a0:	f7ff fc40 	bl	8002124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028a4:	4b38      	ldr	r3, [pc, #224]	; (8002988 <xTaskResumeAll+0x114>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	4a37      	ldr	r2, [pc, #220]	; (8002988 <xTaskResumeAll+0x114>)
 80028ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <xTaskResumeAll+0x114>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d161      	bne.n	800297a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028b6:	4b35      	ldr	r3, [pc, #212]	; (800298c <xTaskResumeAll+0x118>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d05d      	beq.n	800297a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028be:	e02e      	b.n	800291e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <xTaskResumeAll+0x11c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3318      	adds	r3, #24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fad3 	bl	8001e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff face 	bl	8001e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <xTaskResumeAll+0x120>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <xTaskResumeAll+0x120>)
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4a27      	ldr	r2, [pc, #156]	; (8002998 <xTaskResumeAll+0x124>)
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3304      	adds	r3, #4
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f7ff fa5a 	bl	8001dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <xTaskResumeAll+0x128>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	429a      	cmp	r2, r3
 8002916:	d302      	bcc.n	800291e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <xTaskResumeAll+0x12c>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <xTaskResumeAll+0x11c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cc      	bne.n	80028c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800292c:	f000 fa08 	bl	8002d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <xTaskResumeAll+0x130>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800293c:	f000 f836 	bl	80029ac <xTaskIncrementTick>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <xTaskResumeAll+0x12c>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f1      	bne.n	800293c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <xTaskResumeAll+0x130>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <xTaskResumeAll+0x12c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002966:	2301      	movs	r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <xTaskResumeAll+0x134>)
 800296c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800297a:	f7ff fc03 	bl	8002184 <vPortExitCritical>

	return xAlreadyYielded;
 800297e:	68bb      	ldr	r3, [r7, #8]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20004238 	.word	0x20004238
 800298c:	20004210 	.word	0x20004210
 8002990:	200041d0 	.word	0x200041d0
 8002994:	20004218 	.word	0x20004218
 8002998:	20004114 	.word	0x20004114
 800299c:	20004110 	.word	0x20004110
 80029a0:	20004224 	.word	0x20004224
 80029a4:	20004220 	.word	0x20004220
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b6:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <xTaskIncrementTick+0x144>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 808e 	bne.w	8002adc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <xTaskIncrementTick+0x148>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <xTaskIncrementTick+0x148>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d120      	bne.n	8002a16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80029d4:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <xTaskIncrementTick+0x14c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	603b      	str	r3, [r7, #0]
}
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <xTaskIncrementTick+0x46>
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <xTaskIncrementTick+0x14c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <xTaskIncrementTick+0x150>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3e      	ldr	r2, [pc, #248]	; (8002af8 <xTaskIncrementTick+0x14c>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4a3e      	ldr	r2, [pc, #248]	; (8002afc <xTaskIncrementTick+0x150>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <xTaskIncrementTick+0x154>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <xTaskIncrementTick+0x154>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	f000 f995 	bl	8002d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <xTaskIncrementTick+0x158>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d348      	bcc.n	8002ab2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <xTaskIncrementTick+0x14c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <xTaskIncrementTick+0x158>)
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	601a      	str	r2, [r3, #0]
					break;
 8002a32:	e03e      	b.n	8002ab2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <xTaskIncrementTick+0x14c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d203      	bcs.n	8002a54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	; (8002b04 <xTaskIncrementTick+0x158>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a52:	e02e      	b.n	8002ab2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fa0d 	bl	8001e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3318      	adds	r3, #24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa04 	bl	8001e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <xTaskIncrementTick+0x15c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <xTaskIncrementTick+0x15c>)
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <xTaskIncrementTick+0x160>)
 8002a90:	441a      	add	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7ff f990 	bl	8001dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <xTaskIncrementTick+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3b9      	bcc.n	8002a20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab0:	e7b6      	b.n	8002a20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <xTaskIncrementTick+0x164>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4914      	ldr	r1, [pc, #80]	; (8002b0c <xTaskIncrementTick+0x160>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d901      	bls.n	8002ace <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <xTaskIncrementTick+0x168>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e004      	b.n	8002ae6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <xTaskIncrementTick+0x16c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <xTaskIncrementTick+0x16c>)
 8002ae4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ae6:	697b      	ldr	r3, [r7, #20]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20004238 	.word	0x20004238
 8002af4:	20004214 	.word	0x20004214
 8002af8:	200041c8 	.word	0x200041c8
 8002afc:	200041cc 	.word	0x200041cc
 8002b00:	20004228 	.word	0x20004228
 8002b04:	20004230 	.word	0x20004230
 8002b08:	20004218 	.word	0x20004218
 8002b0c:	20004114 	.word	0x20004114
 8002b10:	20004110 	.word	0x20004110
 8002b14:	20004224 	.word	0x20004224
 8002b18:	20004220 	.word	0x20004220

08002b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <vTaskSwitchContext+0xa4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <vTaskSwitchContext+0xa8>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b30:	e03f      	b.n	8002bb2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <vTaskSwitchContext+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <vTaskSwitchContext+0xac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b46:	7afb      	ldrb	r3, [r7, #11]
 8002b48:	f1c3 031f 	rsb	r3, r3, #31
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	491f      	ldr	r1, [pc, #124]	; (8002bcc <vTaskSwitchContext+0xb0>)
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	607b      	str	r3, [r7, #4]
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <vTaskSwitchContext+0x5a>
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <vTaskSwitchContext+0xb0>)
 8002b84:	4413      	add	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d104      	bne.n	8002ba8 <vTaskSwitchContext+0x8c>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <vTaskSwitchContext+0xb4>)
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20004238 	.word	0x20004238
 8002bc4:	20004224 	.word	0x20004224
 8002bc8:	20004218 	.word	0x20004218
 8002bcc:	20004114 	.word	0x20004114
 8002bd0:	20004110 	.word	0x20004110

08002bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bdc:	f000 f852 	bl	8002c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <prvIdleTask+0x28>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d9f9      	bls.n	8002bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <prvIdleTask+0x2c>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002bf8:	e7f0      	b.n	8002bdc <prvIdleTask+0x8>
 8002bfa:	bf00      	nop
 8002bfc:	20004114 	.word	0x20004114
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	e00c      	b.n	8002c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <prvInitialiseTaskLists+0x60>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f8a0 	bl	8001d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3301      	adds	r3, #1
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d9ef      	bls.n	8002c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c30:	480d      	ldr	r0, [pc, #52]	; (8002c68 <prvInitialiseTaskLists+0x64>)
 8002c32:	f7ff f897 	bl	8001d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <prvInitialiseTaskLists+0x68>)
 8002c38:	f7ff f894 	bl	8001d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <prvInitialiseTaskLists+0x6c>)
 8002c3e:	f7ff f891 	bl	8001d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c42:	480c      	ldr	r0, [pc, #48]	; (8002c74 <prvInitialiseTaskLists+0x70>)
 8002c44:	f7ff f88e 	bl	8001d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c48:	480b      	ldr	r0, [pc, #44]	; (8002c78 <prvInitialiseTaskLists+0x74>)
 8002c4a:	f7ff f88b 	bl	8001d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <prvInitialiseTaskLists+0x78>)
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <prvInitialiseTaskLists+0x64>)
 8002c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <prvInitialiseTaskLists+0x7c>)
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <prvInitialiseTaskLists+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20004114 	.word	0x20004114
 8002c68:	200041a0 	.word	0x200041a0
 8002c6c:	200041b4 	.word	0x200041b4
 8002c70:	200041d0 	.word	0x200041d0
 8002c74:	200041e4 	.word	0x200041e4
 8002c78:	200041fc 	.word	0x200041fc
 8002c7c:	200041c8 	.word	0x200041c8
 8002c80:	200041cc 	.word	0x200041cc

08002c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c8a:	e019      	b.n	8002cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c8c:	f7ff fa4a 	bl	8002124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <prvCheckTasksWaitingTermination+0x50>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff f8eb 	bl	8001e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <prvCheckTasksWaitingTermination+0x54>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <prvCheckTasksWaitingTermination+0x54>)
 8002caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <prvCheckTasksWaitingTermination+0x58>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <prvCheckTasksWaitingTermination+0x58>)
 8002cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cb6:	f7ff fa65 	bl	8002184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f810 	bl	8002ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <prvCheckTasksWaitingTermination+0x58>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e1      	bne.n	8002c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200041e4 	.word	0x200041e4
 8002cd8:	20004210 	.word	0x20004210
 8002cdc:	200041f8 	.word	0x200041f8

08002ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ff16 	bl	8001b28 <vPortFree>
				vPortFree( pxTCB );
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fe ff13 	bl	8001b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d02:	e018      	b.n	8002d36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d103      	bne.n	8002d16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe ff0a 	bl	8001b28 <vPortFree>
	}
 8002d14:	e00f      	b.n	8002d36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d00a      	beq.n	8002d36 <prvDeleteTCB+0x56>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	60fb      	str	r3, [r7, #12]
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <prvDeleteTCB+0x54>
	}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <prvResetNextTaskUnblockTime+0x38>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <prvResetNextTaskUnblockTime+0x3c>)
 8002d52:	f04f 32ff 	mov.w	r2, #4294967295
 8002d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d58:	e008      	b.n	8002d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <prvResetNextTaskUnblockTime+0x38>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <prvResetNextTaskUnblockTime+0x3c>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	200041c8 	.word	0x200041c8
 8002d7c:	20004230 	.word	0x20004230

08002d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <xTaskGetSchedulerState+0x34>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	e008      	b.n	8002da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <xTaskGetSchedulerState+0x38>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e001      	b.n	8002da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002da6:	687b      	ldr	r3, [r7, #4]
	}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	2000421c 	.word	0x2000421c
 8002db8:	20004238 	.word	0x20004238

08002dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f850 	bl	8001e78 <uxListRemove>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	2201      	movs	r2, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4013      	ands	r3, r2
 8002df2:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d10a      	bne.n	8002e14 <prvAddCurrentTaskToDelayedList+0x58>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481a      	ldr	r0, [pc, #104]	; (8002e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e0e:	f7fe ffd6 	bl	8001dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e12:	e026      	b.n	8002e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d209      	bcs.n	8002e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7fe ffe4 	bl	8001e06 <vListInsert>
}
 8002e3e:	e010      	b.n	8002e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7fe ffda 	bl	8001e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d202      	bcs.n	8002e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e5c:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6013      	str	r3, [r2, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20004214 	.word	0x20004214
 8002e70:	20004110 	.word	0x20004110
 8002e74:	20004218 	.word	0x20004218
 8002e78:	200041fc 	.word	0x200041fc
 8002e7c:	200041cc 	.word	0x200041cc
 8002e80:	200041c8 	.word	0x200041c8
 8002e84:	20004230 	.word	0x20004230

08002e88 <__errno>:
 8002e88:	4b01      	ldr	r3, [pc, #4]	; (8002e90 <__errno+0x8>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000010 	.word	0x20000010

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4d0d      	ldr	r5, [pc, #52]	; (8002ecc <__libc_init_array+0x38>)
 8002e98:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	4d0b      	ldr	r5, [pc, #44]	; (8002ed4 <__libc_init_array+0x40>)
 8002ea6:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <__libc_init_array+0x44>)
 8002ea8:	f000 fce6 	bl	8003878 <_init>
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08003978 	.word	0x08003978
 8002ed0:	08003978 	.word	0x08003978
 8002ed4:	08003978 	.word	0x08003978
 8002ed8:	0800397c 	.word	0x0800397c

08002edc <memset>:
 8002edc:	4402      	add	r2, r0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <_puts_r>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	460e      	mov	r6, r1
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b118      	cbz	r0, 8002efc <_puts_r+0x10>
 8002ef4:	6983      	ldr	r3, [r0, #24]
 8002ef6:	b90b      	cbnz	r3, 8002efc <_puts_r+0x10>
 8002ef8:	f000 fa48 	bl	800338c <__sinit>
 8002efc:	69ab      	ldr	r3, [r5, #24]
 8002efe:	68ac      	ldr	r4, [r5, #8]
 8002f00:	b913      	cbnz	r3, 8002f08 <_puts_r+0x1c>
 8002f02:	4628      	mov	r0, r5
 8002f04:	f000 fa42 	bl	800338c <__sinit>
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <_puts_r+0xd0>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d120      	bne.n	8002f50 <_puts_r+0x64>
 8002f0e:	686c      	ldr	r4, [r5, #4]
 8002f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d405      	bmi.n	8002f22 <_puts_r+0x36>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	0598      	lsls	r0, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_puts_r+0x36>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f000 fad3 	bl	80034c8 <__retarget_lock_acquire_recursive>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	0719      	lsls	r1, r3, #28
 8002f26:	d51d      	bpl.n	8002f64 <_puts_r+0x78>
 8002f28:	6923      	ldr	r3, [r4, #16]
 8002f2a:	b1db      	cbz	r3, 8002f64 <_puts_r+0x78>
 8002f2c:	3e01      	subs	r6, #1
 8002f2e:	68a3      	ldr	r3, [r4, #8]
 8002f30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60a3      	str	r3, [r4, #8]
 8002f38:	bb39      	cbnz	r1, 8002f8a <_puts_r+0x9e>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da38      	bge.n	8002fb0 <_puts_r+0xc4>
 8002f3e:	4622      	mov	r2, r4
 8002f40:	210a      	movs	r1, #10
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f848 	bl	8002fd8 <__swbuf_r>
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d011      	beq.n	8002f70 <_puts_r+0x84>
 8002f4c:	250a      	movs	r5, #10
 8002f4e:	e011      	b.n	8002f74 <_puts_r+0x88>
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <_puts_r+0xd4>)
 8002f52:	429c      	cmp	r4, r3
 8002f54:	d101      	bne.n	8002f5a <_puts_r+0x6e>
 8002f56:	68ac      	ldr	r4, [r5, #8]
 8002f58:	e7da      	b.n	8002f10 <_puts_r+0x24>
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <_puts_r+0xd8>)
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	bf08      	it	eq
 8002f60:	68ec      	ldreq	r4, [r5, #12]
 8002f62:	e7d5      	b.n	8002f10 <_puts_r+0x24>
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 f888 	bl	800307c <__swsetup_r>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d0dd      	beq.n	8002f2c <_puts_r+0x40>
 8002f70:	f04f 35ff 	mov.w	r5, #4294967295
 8002f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f76:	07da      	lsls	r2, r3, #31
 8002f78:	d405      	bmi.n	8002f86 <_puts_r+0x9a>
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	059b      	lsls	r3, r3, #22
 8002f7e:	d402      	bmi.n	8002f86 <_puts_r+0x9a>
 8002f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f82:	f000 faa2 	bl	80034ca <__retarget_lock_release_recursive>
 8002f86:	4628      	mov	r0, r5
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da04      	bge.n	8002f98 <_puts_r+0xac>
 8002f8e:	69a2      	ldr	r2, [r4, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dc06      	bgt.n	8002fa2 <_puts_r+0xb6>
 8002f94:	290a      	cmp	r1, #10
 8002f96:	d004      	beq.n	8002fa2 <_puts_r+0xb6>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	6022      	str	r2, [r4, #0]
 8002f9e:	7019      	strb	r1, [r3, #0]
 8002fa0:	e7c5      	b.n	8002f2e <_puts_r+0x42>
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 f817 	bl	8002fd8 <__swbuf_r>
 8002faa:	3001      	adds	r0, #1
 8002fac:	d1bf      	bne.n	8002f2e <_puts_r+0x42>
 8002fae:	e7df      	b.n	8002f70 <_puts_r+0x84>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	250a      	movs	r5, #10
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	6022      	str	r2, [r4, #0]
 8002fb8:	701d      	strb	r5, [r3, #0]
 8002fba:	e7db      	b.n	8002f74 <_puts_r+0x88>
 8002fbc:	08003930 	.word	0x08003930
 8002fc0:	08003950 	.word	0x08003950
 8002fc4:	08003910 	.word	0x08003910

08002fc8 <puts>:
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <puts+0xc>)
 8002fca:	4601      	mov	r1, r0
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	f7ff bf8d 	b.w	8002eec <_puts_r>
 8002fd2:	bf00      	nop
 8002fd4:	20000010 	.word	0x20000010

08002fd8 <__swbuf_r>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	460e      	mov	r6, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	4605      	mov	r5, r0
 8002fe0:	b118      	cbz	r0, 8002fea <__swbuf_r+0x12>
 8002fe2:	6983      	ldr	r3, [r0, #24]
 8002fe4:	b90b      	cbnz	r3, 8002fea <__swbuf_r+0x12>
 8002fe6:	f000 f9d1 	bl	800338c <__sinit>
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <__swbuf_r+0x98>)
 8002fec:	429c      	cmp	r4, r3
 8002fee:	d12b      	bne.n	8003048 <__swbuf_r+0x70>
 8002ff0:	686c      	ldr	r4, [r5, #4]
 8002ff2:	69a3      	ldr	r3, [r4, #24]
 8002ff4:	60a3      	str	r3, [r4, #8]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	071a      	lsls	r2, r3, #28
 8002ffa:	d52f      	bpl.n	800305c <__swbuf_r+0x84>
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	b36b      	cbz	r3, 800305c <__swbuf_r+0x84>
 8003000:	6923      	ldr	r3, [r4, #16]
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	1ac0      	subs	r0, r0, r3
 8003006:	6963      	ldr	r3, [r4, #20]
 8003008:	b2f6      	uxtb	r6, r6
 800300a:	4283      	cmp	r3, r0
 800300c:	4637      	mov	r7, r6
 800300e:	dc04      	bgt.n	800301a <__swbuf_r+0x42>
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f926 	bl	8003264 <_fflush_r>
 8003018:	bb30      	cbnz	r0, 8003068 <__swbuf_r+0x90>
 800301a:	68a3      	ldr	r3, [r4, #8]
 800301c:	3b01      	subs	r3, #1
 800301e:	60a3      	str	r3, [r4, #8]
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	701e      	strb	r6, [r3, #0]
 8003028:	6963      	ldr	r3, [r4, #20]
 800302a:	3001      	adds	r0, #1
 800302c:	4283      	cmp	r3, r0
 800302e:	d004      	beq.n	800303a <__swbuf_r+0x62>
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	07db      	lsls	r3, r3, #31
 8003034:	d506      	bpl.n	8003044 <__swbuf_r+0x6c>
 8003036:	2e0a      	cmp	r6, #10
 8003038:	d104      	bne.n	8003044 <__swbuf_r+0x6c>
 800303a:	4621      	mov	r1, r4
 800303c:	4628      	mov	r0, r5
 800303e:	f000 f911 	bl	8003264 <_fflush_r>
 8003042:	b988      	cbnz	r0, 8003068 <__swbuf_r+0x90>
 8003044:	4638      	mov	r0, r7
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <__swbuf_r+0x9c>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d101      	bne.n	8003052 <__swbuf_r+0x7a>
 800304e:	68ac      	ldr	r4, [r5, #8]
 8003050:	e7cf      	b.n	8002ff2 <__swbuf_r+0x1a>
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <__swbuf_r+0xa0>)
 8003054:	429c      	cmp	r4, r3
 8003056:	bf08      	it	eq
 8003058:	68ec      	ldreq	r4, [r5, #12]
 800305a:	e7ca      	b.n	8002ff2 <__swbuf_r+0x1a>
 800305c:	4621      	mov	r1, r4
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f80c 	bl	800307c <__swsetup_r>
 8003064:	2800      	cmp	r0, #0
 8003066:	d0cb      	beq.n	8003000 <__swbuf_r+0x28>
 8003068:	f04f 37ff 	mov.w	r7, #4294967295
 800306c:	e7ea      	b.n	8003044 <__swbuf_r+0x6c>
 800306e:	bf00      	nop
 8003070:	08003930 	.word	0x08003930
 8003074:	08003950 	.word	0x08003950
 8003078:	08003910 	.word	0x08003910

0800307c <__swsetup_r>:
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <__swsetup_r+0xcc>)
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	681d      	ldr	r5, [r3, #0]
 8003082:	4606      	mov	r6, r0
 8003084:	460c      	mov	r4, r1
 8003086:	b125      	cbz	r5, 8003092 <__swsetup_r+0x16>
 8003088:	69ab      	ldr	r3, [r5, #24]
 800308a:	b913      	cbnz	r3, 8003092 <__swsetup_r+0x16>
 800308c:	4628      	mov	r0, r5
 800308e:	f000 f97d 	bl	800338c <__sinit>
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <__swsetup_r+0xd0>)
 8003094:	429c      	cmp	r4, r3
 8003096:	d10f      	bne.n	80030b8 <__swsetup_r+0x3c>
 8003098:	686c      	ldr	r4, [r5, #4]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030a0:	0719      	lsls	r1, r3, #28
 80030a2:	d42c      	bmi.n	80030fe <__swsetup_r+0x82>
 80030a4:	06dd      	lsls	r5, r3, #27
 80030a6:	d411      	bmi.n	80030cc <__swsetup_r+0x50>
 80030a8:	2309      	movs	r3, #9
 80030aa:	6033      	str	r3, [r6, #0]
 80030ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030b0:	81a3      	strh	r3, [r4, #12]
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295
 80030b6:	e03e      	b.n	8003136 <__swsetup_r+0xba>
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <__swsetup_r+0xd4>)
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d101      	bne.n	80030c2 <__swsetup_r+0x46>
 80030be:	68ac      	ldr	r4, [r5, #8]
 80030c0:	e7eb      	b.n	800309a <__swsetup_r+0x1e>
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <__swsetup_r+0xd8>)
 80030c4:	429c      	cmp	r4, r3
 80030c6:	bf08      	it	eq
 80030c8:	68ec      	ldreq	r4, [r5, #12]
 80030ca:	e7e6      	b.n	800309a <__swsetup_r+0x1e>
 80030cc:	0758      	lsls	r0, r3, #29
 80030ce:	d512      	bpl.n	80030f6 <__swsetup_r+0x7a>
 80030d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d2:	b141      	cbz	r1, 80030e6 <__swsetup_r+0x6a>
 80030d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d8:	4299      	cmp	r1, r3
 80030da:	d002      	beq.n	80030e2 <__swsetup_r+0x66>
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 fa59 	bl	8003594 <_free_r>
 80030e2:	2300      	movs	r3, #0
 80030e4:	6363      	str	r3, [r4, #52]	; 0x34
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	81a3      	strh	r3, [r4, #12]
 80030fe:	6923      	ldr	r3, [r4, #16]
 8003100:	b94b      	cbnz	r3, 8003116 <__swsetup_r+0x9a>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d003      	beq.n	8003116 <__swsetup_r+0x9a>
 800310e:	4621      	mov	r1, r4
 8003110:	4630      	mov	r0, r6
 8003112:	f000 f9ff 	bl	8003514 <__smakebuf_r>
 8003116:	89a0      	ldrh	r0, [r4, #12]
 8003118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800311c:	f010 0301 	ands.w	r3, r0, #1
 8003120:	d00a      	beq.n	8003138 <__swsetup_r+0xbc>
 8003122:	2300      	movs	r3, #0
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	6963      	ldr	r3, [r4, #20]
 8003128:	425b      	negs	r3, r3
 800312a:	61a3      	str	r3, [r4, #24]
 800312c:	6923      	ldr	r3, [r4, #16]
 800312e:	b943      	cbnz	r3, 8003142 <__swsetup_r+0xc6>
 8003130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003134:	d1ba      	bne.n	80030ac <__swsetup_r+0x30>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	0781      	lsls	r1, r0, #30
 800313a:	bf58      	it	pl
 800313c:	6963      	ldrpl	r3, [r4, #20]
 800313e:	60a3      	str	r3, [r4, #8]
 8003140:	e7f4      	b.n	800312c <__swsetup_r+0xb0>
 8003142:	2000      	movs	r0, #0
 8003144:	e7f7      	b.n	8003136 <__swsetup_r+0xba>
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010
 800314c:	08003930 	.word	0x08003930
 8003150:	08003950 	.word	0x08003950
 8003154:	08003910 	.word	0x08003910

08003158 <__sflush_r>:
 8003158:	898a      	ldrh	r2, [r1, #12]
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	0710      	lsls	r0, r2, #28
 8003162:	460c      	mov	r4, r1
 8003164:	d458      	bmi.n	8003218 <__sflush_r+0xc0>
 8003166:	684b      	ldr	r3, [r1, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc05      	bgt.n	8003178 <__sflush_r+0x20>
 800316c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	dc02      	bgt.n	8003178 <__sflush_r+0x20>
 8003172:	2000      	movs	r0, #0
 8003174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800317a:	2e00      	cmp	r6, #0
 800317c:	d0f9      	beq.n	8003172 <__sflush_r+0x1a>
 800317e:	2300      	movs	r3, #0
 8003180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003184:	682f      	ldr	r7, [r5, #0]
 8003186:	602b      	str	r3, [r5, #0]
 8003188:	d032      	beq.n	80031f0 <__sflush_r+0x98>
 800318a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	075a      	lsls	r2, r3, #29
 8003190:	d505      	bpl.n	800319e <__sflush_r+0x46>
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	1ac0      	subs	r0, r0, r3
 8003196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003198:	b10b      	cbz	r3, 800319e <__sflush_r+0x46>
 800319a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800319c:	1ac0      	subs	r0, r0, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	4602      	mov	r2, r0
 80031a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	4628      	mov	r0, r5
 80031a8:	47b0      	blx	r6
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	d106      	bne.n	80031be <__sflush_r+0x66>
 80031b0:	6829      	ldr	r1, [r5, #0]
 80031b2:	291d      	cmp	r1, #29
 80031b4:	d82c      	bhi.n	8003210 <__sflush_r+0xb8>
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <__sflush_r+0x108>)
 80031b8:	40ca      	lsrs	r2, r1
 80031ba:	07d6      	lsls	r6, r2, #31
 80031bc:	d528      	bpl.n	8003210 <__sflush_r+0xb8>
 80031be:	2200      	movs	r2, #0
 80031c0:	6062      	str	r2, [r4, #4]
 80031c2:	04d9      	lsls	r1, r3, #19
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	d504      	bpl.n	80031d4 <__sflush_r+0x7c>
 80031ca:	1c42      	adds	r2, r0, #1
 80031cc:	d101      	bne.n	80031d2 <__sflush_r+0x7a>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b903      	cbnz	r3, 80031d4 <__sflush_r+0x7c>
 80031d2:	6560      	str	r0, [r4, #84]	; 0x54
 80031d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d6:	602f      	str	r7, [r5, #0]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d0ca      	beq.n	8003172 <__sflush_r+0x1a>
 80031dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <__sflush_r+0x92>
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f9d5 	bl	8003594 <_free_r>
 80031ea:	2000      	movs	r0, #0
 80031ec:	6360      	str	r0, [r4, #52]	; 0x34
 80031ee:	e7c1      	b.n	8003174 <__sflush_r+0x1c>
 80031f0:	6a21      	ldr	r1, [r4, #32]
 80031f2:	2301      	movs	r3, #1
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b0      	blx	r6
 80031f8:	1c41      	adds	r1, r0, #1
 80031fa:	d1c7      	bne.n	800318c <__sflush_r+0x34>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c4      	beq.n	800318c <__sflush_r+0x34>
 8003202:	2b1d      	cmp	r3, #29
 8003204:	d001      	beq.n	800320a <__sflush_r+0xb2>
 8003206:	2b16      	cmp	r3, #22
 8003208:	d101      	bne.n	800320e <__sflush_r+0xb6>
 800320a:	602f      	str	r7, [r5, #0]
 800320c:	e7b1      	b.n	8003172 <__sflush_r+0x1a>
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	e7ad      	b.n	8003174 <__sflush_r+0x1c>
 8003218:	690f      	ldr	r7, [r1, #16]
 800321a:	2f00      	cmp	r7, #0
 800321c:	d0a9      	beq.n	8003172 <__sflush_r+0x1a>
 800321e:	0793      	lsls	r3, r2, #30
 8003220:	680e      	ldr	r6, [r1, #0]
 8003222:	bf08      	it	eq
 8003224:	694b      	ldreq	r3, [r1, #20]
 8003226:	600f      	str	r7, [r1, #0]
 8003228:	bf18      	it	ne
 800322a:	2300      	movne	r3, #0
 800322c:	eba6 0807 	sub.w	r8, r6, r7
 8003230:	608b      	str	r3, [r1, #8]
 8003232:	f1b8 0f00 	cmp.w	r8, #0
 8003236:	dd9c      	ble.n	8003172 <__sflush_r+0x1a>
 8003238:	6a21      	ldr	r1, [r4, #32]
 800323a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800323c:	4643      	mov	r3, r8
 800323e:	463a      	mov	r2, r7
 8003240:	4628      	mov	r0, r5
 8003242:	47b0      	blx	r6
 8003244:	2800      	cmp	r0, #0
 8003246:	dc06      	bgt.n	8003256 <__sflush_r+0xfe>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	e78e      	b.n	8003174 <__sflush_r+0x1c>
 8003256:	4407      	add	r7, r0
 8003258:	eba8 0800 	sub.w	r8, r8, r0
 800325c:	e7e9      	b.n	8003232 <__sflush_r+0xda>
 800325e:	bf00      	nop
 8003260:	20400001 	.word	0x20400001

08003264 <_fflush_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	4605      	mov	r5, r0
 800326a:	460c      	mov	r4, r1
 800326c:	b913      	cbnz	r3, 8003274 <_fflush_r+0x10>
 800326e:	2500      	movs	r5, #0
 8003270:	4628      	mov	r0, r5
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	b118      	cbz	r0, 800327e <_fflush_r+0x1a>
 8003276:	6983      	ldr	r3, [r0, #24]
 8003278:	b90b      	cbnz	r3, 800327e <_fflush_r+0x1a>
 800327a:	f000 f887 	bl	800338c <__sinit>
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <_fflush_r+0x6c>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d11b      	bne.n	80032bc <_fflush_r+0x58>
 8003284:	686c      	ldr	r4, [r5, #4]
 8003286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <_fflush_r+0xa>
 800328e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003290:	07d0      	lsls	r0, r2, #31
 8003292:	d404      	bmi.n	800329e <_fflush_r+0x3a>
 8003294:	0599      	lsls	r1, r3, #22
 8003296:	d402      	bmi.n	800329e <_fflush_r+0x3a>
 8003298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329a:	f000 f915 	bl	80034c8 <__retarget_lock_acquire_recursive>
 800329e:	4628      	mov	r0, r5
 80032a0:	4621      	mov	r1, r4
 80032a2:	f7ff ff59 	bl	8003158 <__sflush_r>
 80032a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a8:	07da      	lsls	r2, r3, #31
 80032aa:	4605      	mov	r5, r0
 80032ac:	d4e0      	bmi.n	8003270 <_fflush_r+0xc>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	059b      	lsls	r3, r3, #22
 80032b2:	d4dd      	bmi.n	8003270 <_fflush_r+0xc>
 80032b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b6:	f000 f908 	bl	80034ca <__retarget_lock_release_recursive>
 80032ba:	e7d9      	b.n	8003270 <_fflush_r+0xc>
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <_fflush_r+0x70>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <_fflush_r+0x62>
 80032c2:	68ac      	ldr	r4, [r5, #8]
 80032c4:	e7df      	b.n	8003286 <_fflush_r+0x22>
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <_fflush_r+0x74>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68ec      	ldreq	r4, [r5, #12]
 80032ce:	e7da      	b.n	8003286 <_fflush_r+0x22>
 80032d0:	08003930 	.word	0x08003930
 80032d4:	08003950 	.word	0x08003950
 80032d8:	08003910 	.word	0x08003910

080032dc <std>:
 80032dc:	2300      	movs	r3, #0
 80032de:	b510      	push	{r4, lr}
 80032e0:	4604      	mov	r4, r0
 80032e2:	e9c0 3300 	strd	r3, r3, [r0]
 80032e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ea:	6083      	str	r3, [r0, #8]
 80032ec:	8181      	strh	r1, [r0, #12]
 80032ee:	6643      	str	r3, [r0, #100]	; 0x64
 80032f0:	81c2      	strh	r2, [r0, #14]
 80032f2:	6183      	str	r3, [r0, #24]
 80032f4:	4619      	mov	r1, r3
 80032f6:	2208      	movs	r2, #8
 80032f8:	305c      	adds	r0, #92	; 0x5c
 80032fa:	f7ff fdef 	bl	8002edc <memset>
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <std+0x38>)
 8003300:	6263      	str	r3, [r4, #36]	; 0x24
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <std+0x3c>)
 8003304:	62a3      	str	r3, [r4, #40]	; 0x28
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <std+0x40>)
 8003308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <std+0x44>)
 800330c:	6224      	str	r4, [r4, #32]
 800330e:	6323      	str	r3, [r4, #48]	; 0x30
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	08003709 	.word	0x08003709
 8003318:	0800372b 	.word	0x0800372b
 800331c:	08003763 	.word	0x08003763
 8003320:	08003787 	.word	0x08003787

08003324 <_cleanup_r>:
 8003324:	4901      	ldr	r1, [pc, #4]	; (800332c <_cleanup_r+0x8>)
 8003326:	f000 b8af 	b.w	8003488 <_fwalk_reent>
 800332a:	bf00      	nop
 800332c:	08003265 	.word	0x08003265

08003330 <__sfmoreglue>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	1e4a      	subs	r2, r1, #1
 8003334:	2568      	movs	r5, #104	; 0x68
 8003336:	4355      	muls	r5, r2
 8003338:	460e      	mov	r6, r1
 800333a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800333e:	f000 f979 	bl	8003634 <_malloc_r>
 8003342:	4604      	mov	r4, r0
 8003344:	b140      	cbz	r0, 8003358 <__sfmoreglue+0x28>
 8003346:	2100      	movs	r1, #0
 8003348:	e9c0 1600 	strd	r1, r6, [r0]
 800334c:	300c      	adds	r0, #12
 800334e:	60a0      	str	r0, [r4, #8]
 8003350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003354:	f7ff fdc2 	bl	8002edc <memset>
 8003358:	4620      	mov	r0, r4
 800335a:	bd70      	pop	{r4, r5, r6, pc}

0800335c <__sfp_lock_acquire>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__sfp_lock_acquire+0x8>)
 800335e:	f000 b8b3 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 8003362:	bf00      	nop
 8003364:	200042b0 	.word	0x200042b0

08003368 <__sfp_lock_release>:
 8003368:	4801      	ldr	r0, [pc, #4]	; (8003370 <__sfp_lock_release+0x8>)
 800336a:	f000 b8ae 	b.w	80034ca <__retarget_lock_release_recursive>
 800336e:	bf00      	nop
 8003370:	200042b0 	.word	0x200042b0

08003374 <__sinit_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sinit_lock_acquire+0x8>)
 8003376:	f000 b8a7 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200042ab 	.word	0x200042ab

08003380 <__sinit_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sinit_lock_release+0x8>)
 8003382:	f000 b8a2 	b.w	80034ca <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200042ab 	.word	0x200042ab

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sinit_lock_acquire>
 8003394:	69a3      	ldr	r3, [r4, #24]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sinit_lock_release>
 80033a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033a4:	6523      	str	r3, [r4, #80]	; 0x50
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <__sinit+0x68>)
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <__sinit+0x6c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80033ae:	42a3      	cmp	r3, r4
 80033b0:	bf04      	itt	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	61a3      	streq	r3, [r4, #24]
 80033b6:	4620      	mov	r0, r4
 80033b8:	f000 f820 	bl	80033fc <__sfp>
 80033bc:	6060      	str	r0, [r4, #4]
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 f81c 	bl	80033fc <__sfp>
 80033c4:	60a0      	str	r0, [r4, #8]
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 f818 	bl	80033fc <__sfp>
 80033cc:	2200      	movs	r2, #0
 80033ce:	60e0      	str	r0, [r4, #12]
 80033d0:	2104      	movs	r1, #4
 80033d2:	6860      	ldr	r0, [r4, #4]
 80033d4:	f7ff ff82 	bl	80032dc <std>
 80033d8:	68a0      	ldr	r0, [r4, #8]
 80033da:	2201      	movs	r2, #1
 80033dc:	2109      	movs	r1, #9
 80033de:	f7ff ff7d 	bl	80032dc <std>
 80033e2:	68e0      	ldr	r0, [r4, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	2112      	movs	r1, #18
 80033e8:	f7ff ff78 	bl	80032dc <std>
 80033ec:	2301      	movs	r3, #1
 80033ee:	61a3      	str	r3, [r4, #24]
 80033f0:	e7d2      	b.n	8003398 <__sinit+0xc>
 80033f2:	bf00      	nop
 80033f4:	0800390c 	.word	0x0800390c
 80033f8:	08003325 	.word	0x08003325

080033fc <__sfp>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	4607      	mov	r7, r0
 8003400:	f7ff ffac 	bl	800335c <__sfp_lock_acquire>
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <__sfp+0x84>)
 8003406:	681e      	ldr	r6, [r3, #0]
 8003408:	69b3      	ldr	r3, [r6, #24]
 800340a:	b913      	cbnz	r3, 8003412 <__sfp+0x16>
 800340c:	4630      	mov	r0, r6
 800340e:	f7ff ffbd 	bl	800338c <__sinit>
 8003412:	3648      	adds	r6, #72	; 0x48
 8003414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003418:	3b01      	subs	r3, #1
 800341a:	d503      	bpl.n	8003424 <__sfp+0x28>
 800341c:	6833      	ldr	r3, [r6, #0]
 800341e:	b30b      	cbz	r3, 8003464 <__sfp+0x68>
 8003420:	6836      	ldr	r6, [r6, #0]
 8003422:	e7f7      	b.n	8003414 <__sfp+0x18>
 8003424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003428:	b9d5      	cbnz	r5, 8003460 <__sfp+0x64>
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <__sfp+0x88>)
 800342c:	60e3      	str	r3, [r4, #12]
 800342e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003432:	6665      	str	r5, [r4, #100]	; 0x64
 8003434:	f000 f847 	bl	80034c6 <__retarget_lock_init_recursive>
 8003438:	f7ff ff96 	bl	8003368 <__sfp_lock_release>
 800343c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	61a5      	str	r5, [r4, #24]
 8003448:	2208      	movs	r2, #8
 800344a:	4629      	mov	r1, r5
 800344c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003450:	f7ff fd44 	bl	8002edc <memset>
 8003454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800345c:	4620      	mov	r0, r4
 800345e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003460:	3468      	adds	r4, #104	; 0x68
 8003462:	e7d9      	b.n	8003418 <__sfp+0x1c>
 8003464:	2104      	movs	r1, #4
 8003466:	4638      	mov	r0, r7
 8003468:	f7ff ff62 	bl	8003330 <__sfmoreglue>
 800346c:	4604      	mov	r4, r0
 800346e:	6030      	str	r0, [r6, #0]
 8003470:	2800      	cmp	r0, #0
 8003472:	d1d5      	bne.n	8003420 <__sfp+0x24>
 8003474:	f7ff ff78 	bl	8003368 <__sfp_lock_release>
 8003478:	230c      	movs	r3, #12
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	e7ee      	b.n	800345c <__sfp+0x60>
 800347e:	bf00      	nop
 8003480:	0800390c 	.word	0x0800390c
 8003484:	ffff0001 	.word	0xffff0001

08003488 <_fwalk_reent>:
 8003488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800348c:	4606      	mov	r6, r0
 800348e:	4688      	mov	r8, r1
 8003490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003494:	2700      	movs	r7, #0
 8003496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800349a:	f1b9 0901 	subs.w	r9, r9, #1
 800349e:	d505      	bpl.n	80034ac <_fwalk_reent+0x24>
 80034a0:	6824      	ldr	r4, [r4, #0]
 80034a2:	2c00      	cmp	r4, #0
 80034a4:	d1f7      	bne.n	8003496 <_fwalk_reent+0xe>
 80034a6:	4638      	mov	r0, r7
 80034a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ac:	89ab      	ldrh	r3, [r5, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d907      	bls.n	80034c2 <_fwalk_reent+0x3a>
 80034b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034b6:	3301      	adds	r3, #1
 80034b8:	d003      	beq.n	80034c2 <_fwalk_reent+0x3a>
 80034ba:	4629      	mov	r1, r5
 80034bc:	4630      	mov	r0, r6
 80034be:	47c0      	blx	r8
 80034c0:	4307      	orrs	r7, r0
 80034c2:	3568      	adds	r5, #104	; 0x68
 80034c4:	e7e9      	b.n	800349a <_fwalk_reent+0x12>

080034c6 <__retarget_lock_init_recursive>:
 80034c6:	4770      	bx	lr

080034c8 <__retarget_lock_acquire_recursive>:
 80034c8:	4770      	bx	lr

080034ca <__retarget_lock_release_recursive>:
 80034ca:	4770      	bx	lr

080034cc <__swhatbuf_r>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	460e      	mov	r6, r1
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	2900      	cmp	r1, #0
 80034d6:	b096      	sub	sp, #88	; 0x58
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	da07      	bge.n	80034ee <__swhatbuf_r+0x22>
 80034de:	2300      	movs	r3, #0
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	89b3      	ldrh	r3, [r6, #12]
 80034e4:	061a      	lsls	r2, r3, #24
 80034e6:	d410      	bmi.n	800350a <__swhatbuf_r+0x3e>
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	e00e      	b.n	800350c <__swhatbuf_r+0x40>
 80034ee:	466a      	mov	r2, sp
 80034f0:	f000 f970 	bl	80037d4 <_fstat_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	dbf2      	blt.n	80034de <__swhatbuf_r+0x12>
 80034f8:	9a01      	ldr	r2, [sp, #4]
 80034fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003502:	425a      	negs	r2, r3
 8003504:	415a      	adcs	r2, r3
 8003506:	602a      	str	r2, [r5, #0]
 8003508:	e7ee      	b.n	80034e8 <__swhatbuf_r+0x1c>
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	2000      	movs	r0, #0
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	b016      	add	sp, #88	; 0x58
 8003512:	bd70      	pop	{r4, r5, r6, pc}

08003514 <__smakebuf_r>:
 8003514:	898b      	ldrh	r3, [r1, #12]
 8003516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003518:	079d      	lsls	r5, r3, #30
 800351a:	4606      	mov	r6, r0
 800351c:	460c      	mov	r4, r1
 800351e:	d507      	bpl.n	8003530 <__smakebuf_r+0x1c>
 8003520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2301      	movs	r3, #1
 800352a:	6163      	str	r3, [r4, #20]
 800352c:	b002      	add	sp, #8
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	ab01      	add	r3, sp, #4
 8003532:	466a      	mov	r2, sp
 8003534:	f7ff ffca 	bl	80034cc <__swhatbuf_r>
 8003538:	9900      	ldr	r1, [sp, #0]
 800353a:	4605      	mov	r5, r0
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f879 	bl	8003634 <_malloc_r>
 8003542:	b948      	cbnz	r0, 8003558 <__smakebuf_r+0x44>
 8003544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003548:	059a      	lsls	r2, r3, #22
 800354a:	d4ef      	bmi.n	800352c <__smakebuf_r+0x18>
 800354c:	f023 0303 	bic.w	r3, r3, #3
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	e7e3      	b.n	8003520 <__smakebuf_r+0xc>
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <__smakebuf_r+0x7c>)
 800355a:	62b3      	str	r3, [r6, #40]	; 0x28
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	6020      	str	r0, [r4, #0]
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	9b00      	ldr	r3, [sp, #0]
 8003568:	6163      	str	r3, [r4, #20]
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	6120      	str	r0, [r4, #16]
 800356e:	b15b      	cbz	r3, 8003588 <__smakebuf_r+0x74>
 8003570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003574:	4630      	mov	r0, r6
 8003576:	f000 f93f 	bl	80037f8 <_isatty_r>
 800357a:	b128      	cbz	r0, 8003588 <__smakebuf_r+0x74>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	89a0      	ldrh	r0, [r4, #12]
 800358a:	4305      	orrs	r5, r0
 800358c:	81a5      	strh	r5, [r4, #12]
 800358e:	e7cd      	b.n	800352c <__smakebuf_r+0x18>
 8003590:	08003325 	.word	0x08003325

08003594 <_free_r>:
 8003594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003596:	2900      	cmp	r1, #0
 8003598:	d048      	beq.n	800362c <_free_r+0x98>
 800359a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800359e:	9001      	str	r0, [sp, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f1a1 0404 	sub.w	r4, r1, #4
 80035a6:	bfb8      	it	lt
 80035a8:	18e4      	addlt	r4, r4, r3
 80035aa:	f000 f947 	bl	800383c <__malloc_lock>
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <_free_r+0x9c>)
 80035b0:	9801      	ldr	r0, [sp, #4]
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	4615      	mov	r5, r2
 80035b6:	b933      	cbnz	r3, 80035c6 <_free_r+0x32>
 80035b8:	6063      	str	r3, [r4, #4]
 80035ba:	6014      	str	r4, [r2, #0]
 80035bc:	b003      	add	sp, #12
 80035be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035c2:	f000 b941 	b.w	8003848 <__malloc_unlock>
 80035c6:	42a3      	cmp	r3, r4
 80035c8:	d90b      	bls.n	80035e2 <_free_r+0x4e>
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	1862      	adds	r2, r4, r1
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bf04      	itt	eq
 80035d2:	681a      	ldreq	r2, [r3, #0]
 80035d4:	685b      	ldreq	r3, [r3, #4]
 80035d6:	6063      	str	r3, [r4, #4]
 80035d8:	bf04      	itt	eq
 80035da:	1852      	addeq	r2, r2, r1
 80035dc:	6022      	streq	r2, [r4, #0]
 80035de:	602c      	str	r4, [r5, #0]
 80035e0:	e7ec      	b.n	80035bc <_free_r+0x28>
 80035e2:	461a      	mov	r2, r3
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b10b      	cbz	r3, 80035ec <_free_r+0x58>
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d9fa      	bls.n	80035e2 <_free_r+0x4e>
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	1855      	adds	r5, r2, r1
 80035f0:	42a5      	cmp	r5, r4
 80035f2:	d10b      	bne.n	800360c <_free_r+0x78>
 80035f4:	6824      	ldr	r4, [r4, #0]
 80035f6:	4421      	add	r1, r4
 80035f8:	1854      	adds	r4, r2, r1
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	6011      	str	r1, [r2, #0]
 80035fe:	d1dd      	bne.n	80035bc <_free_r+0x28>
 8003600:	681c      	ldr	r4, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	6053      	str	r3, [r2, #4]
 8003606:	4421      	add	r1, r4
 8003608:	6011      	str	r1, [r2, #0]
 800360a:	e7d7      	b.n	80035bc <_free_r+0x28>
 800360c:	d902      	bls.n	8003614 <_free_r+0x80>
 800360e:	230c      	movs	r3, #12
 8003610:	6003      	str	r3, [r0, #0]
 8003612:	e7d3      	b.n	80035bc <_free_r+0x28>
 8003614:	6825      	ldr	r5, [r4, #0]
 8003616:	1961      	adds	r1, r4, r5
 8003618:	428b      	cmp	r3, r1
 800361a:	bf04      	itt	eq
 800361c:	6819      	ldreq	r1, [r3, #0]
 800361e:	685b      	ldreq	r3, [r3, #4]
 8003620:	6063      	str	r3, [r4, #4]
 8003622:	bf04      	itt	eq
 8003624:	1949      	addeq	r1, r1, r5
 8003626:	6021      	streq	r1, [r4, #0]
 8003628:	6054      	str	r4, [r2, #4]
 800362a:	e7c7      	b.n	80035bc <_free_r+0x28>
 800362c:	b003      	add	sp, #12
 800362e:	bd30      	pop	{r4, r5, pc}
 8003630:	2000423c 	.word	0x2000423c

08003634 <_malloc_r>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	1ccd      	adds	r5, r1, #3
 8003638:	f025 0503 	bic.w	r5, r5, #3
 800363c:	3508      	adds	r5, #8
 800363e:	2d0c      	cmp	r5, #12
 8003640:	bf38      	it	cc
 8003642:	250c      	movcc	r5, #12
 8003644:	2d00      	cmp	r5, #0
 8003646:	4606      	mov	r6, r0
 8003648:	db01      	blt.n	800364e <_malloc_r+0x1a>
 800364a:	42a9      	cmp	r1, r5
 800364c:	d903      	bls.n	8003656 <_malloc_r+0x22>
 800364e:	230c      	movs	r3, #12
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	2000      	movs	r0, #0
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003656:	f000 f8f1 	bl	800383c <__malloc_lock>
 800365a:	4921      	ldr	r1, [pc, #132]	; (80036e0 <_malloc_r+0xac>)
 800365c:	680a      	ldr	r2, [r1, #0]
 800365e:	4614      	mov	r4, r2
 8003660:	b99c      	cbnz	r4, 800368a <_malloc_r+0x56>
 8003662:	4f20      	ldr	r7, [pc, #128]	; (80036e4 <_malloc_r+0xb0>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b923      	cbnz	r3, 8003672 <_malloc_r+0x3e>
 8003668:	4621      	mov	r1, r4
 800366a:	4630      	mov	r0, r6
 800366c:	f000 f83c 	bl	80036e8 <_sbrk_r>
 8003670:	6038      	str	r0, [r7, #0]
 8003672:	4629      	mov	r1, r5
 8003674:	4630      	mov	r0, r6
 8003676:	f000 f837 	bl	80036e8 <_sbrk_r>
 800367a:	1c43      	adds	r3, r0, #1
 800367c:	d123      	bne.n	80036c6 <_malloc_r+0x92>
 800367e:	230c      	movs	r3, #12
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	4630      	mov	r0, r6
 8003684:	f000 f8e0 	bl	8003848 <__malloc_unlock>
 8003688:	e7e3      	b.n	8003652 <_malloc_r+0x1e>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	1b5b      	subs	r3, r3, r5
 800368e:	d417      	bmi.n	80036c0 <_malloc_r+0x8c>
 8003690:	2b0b      	cmp	r3, #11
 8003692:	d903      	bls.n	800369c <_malloc_r+0x68>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	441c      	add	r4, r3
 8003698:	6025      	str	r5, [r4, #0]
 800369a:	e004      	b.n	80036a6 <_malloc_r+0x72>
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	42a2      	cmp	r2, r4
 80036a0:	bf0c      	ite	eq
 80036a2:	600b      	streq	r3, [r1, #0]
 80036a4:	6053      	strne	r3, [r2, #4]
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 f8ce 	bl	8003848 <__malloc_unlock>
 80036ac:	f104 000b 	add.w	r0, r4, #11
 80036b0:	1d23      	adds	r3, r4, #4
 80036b2:	f020 0007 	bic.w	r0, r0, #7
 80036b6:	1ac2      	subs	r2, r0, r3
 80036b8:	d0cc      	beq.n	8003654 <_malloc_r+0x20>
 80036ba:	1a1b      	subs	r3, r3, r0
 80036bc:	50a3      	str	r3, [r4, r2]
 80036be:	e7c9      	b.n	8003654 <_malloc_r+0x20>
 80036c0:	4622      	mov	r2, r4
 80036c2:	6864      	ldr	r4, [r4, #4]
 80036c4:	e7cc      	b.n	8003660 <_malloc_r+0x2c>
 80036c6:	1cc4      	adds	r4, r0, #3
 80036c8:	f024 0403 	bic.w	r4, r4, #3
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d0e3      	beq.n	8003698 <_malloc_r+0x64>
 80036d0:	1a21      	subs	r1, r4, r0
 80036d2:	4630      	mov	r0, r6
 80036d4:	f000 f808 	bl	80036e8 <_sbrk_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	d1dd      	bne.n	8003698 <_malloc_r+0x64>
 80036dc:	e7cf      	b.n	800367e <_malloc_r+0x4a>
 80036de:	bf00      	nop
 80036e0:	2000423c 	.word	0x2000423c
 80036e4:	20004240 	.word	0x20004240

080036e8 <_sbrk_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4d06      	ldr	r5, [pc, #24]	; (8003704 <_sbrk_r+0x1c>)
 80036ec:	2300      	movs	r3, #0
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	f7fd f926 	bl	8000944 <_sbrk>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_sbrk_r+0x1a>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_sbrk_r+0x1a>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	200042b4 	.word	0x200042b4

08003708 <__sread>:
 8003708:	b510      	push	{r4, lr}
 800370a:	460c      	mov	r4, r1
 800370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003710:	f000 f8a0 	bl	8003854 <_read_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	bfab      	itete	ge
 8003718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800371a:	89a3      	ldrhlt	r3, [r4, #12]
 800371c:	181b      	addge	r3, r3, r0
 800371e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003722:	bfac      	ite	ge
 8003724:	6563      	strge	r3, [r4, #84]	; 0x54
 8003726:	81a3      	strhlt	r3, [r4, #12]
 8003728:	bd10      	pop	{r4, pc}

0800372a <__swrite>:
 800372a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372e:	461f      	mov	r7, r3
 8003730:	898b      	ldrh	r3, [r1, #12]
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	4605      	mov	r5, r0
 8003736:	460c      	mov	r4, r1
 8003738:	4616      	mov	r6, r2
 800373a:	d505      	bpl.n	8003748 <__swrite+0x1e>
 800373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003740:	2302      	movs	r3, #2
 8003742:	2200      	movs	r2, #0
 8003744:	f000 f868 	bl	8003818 <_lseek_r>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800374e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	4632      	mov	r2, r6
 8003756:	463b      	mov	r3, r7
 8003758:	4628      	mov	r0, r5
 800375a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375e:	f000 b817 	b.w	8003790 <_write_r>

08003762 <__sseek>:
 8003762:	b510      	push	{r4, lr}
 8003764:	460c      	mov	r4, r1
 8003766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376a:	f000 f855 	bl	8003818 <_lseek_r>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	bf15      	itete	ne
 8003774:	6560      	strne	r0, [r4, #84]	; 0x54
 8003776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800377a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800377e:	81a3      	strheq	r3, [r4, #12]
 8003780:	bf18      	it	ne
 8003782:	81a3      	strhne	r3, [r4, #12]
 8003784:	bd10      	pop	{r4, pc}

08003786 <__sclose>:
 8003786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378a:	f000 b813 	b.w	80037b4 <_close_r>
	...

08003790 <_write_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4d07      	ldr	r5, [pc, #28]	; (80037b0 <_write_r+0x20>)
 8003794:	4604      	mov	r4, r0
 8003796:	4608      	mov	r0, r1
 8003798:	4611      	mov	r1, r2
 800379a:	2200      	movs	r2, #0
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7fd f880 	bl	80008a4 <_write>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_write_r+0x1e>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_write_r+0x1e>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	200042b4 	.word	0x200042b4

080037b4 <_close_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4d06      	ldr	r5, [pc, #24]	; (80037d0 <_close_r+0x1c>)
 80037b8:	2300      	movs	r3, #0
 80037ba:	4604      	mov	r4, r0
 80037bc:	4608      	mov	r0, r1
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	f7fd f88c 	bl	80008dc <_close>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_close_r+0x1a>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_close_r+0x1a>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200042b4 	.word	0x200042b4

080037d4 <_fstat_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4d07      	ldr	r5, [pc, #28]	; (80037f4 <_fstat_r+0x20>)
 80037d8:	2300      	movs	r3, #0
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	602b      	str	r3, [r5, #0]
 80037e2:	f7fd f887 	bl	80008f4 <_fstat>
 80037e6:	1c43      	adds	r3, r0, #1
 80037e8:	d102      	bne.n	80037f0 <_fstat_r+0x1c>
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	b103      	cbz	r3, 80037f0 <_fstat_r+0x1c>
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	bd38      	pop	{r3, r4, r5, pc}
 80037f2:	bf00      	nop
 80037f4:	200042b4 	.word	0x200042b4

080037f8 <_isatty_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d06      	ldr	r5, [pc, #24]	; (8003814 <_isatty_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd f886 	bl	8000914 <_isatty>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_isatty_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_isatty_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	200042b4 	.word	0x200042b4

08003818 <_lseek_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4d07      	ldr	r5, [pc, #28]	; (8003838 <_lseek_r+0x20>)
 800381c:	4604      	mov	r4, r0
 800381e:	4608      	mov	r0, r1
 8003820:	4611      	mov	r1, r2
 8003822:	2200      	movs	r2, #0
 8003824:	602a      	str	r2, [r5, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f7fd f87f 	bl	800092a <_lseek>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d102      	bne.n	8003836 <_lseek_r+0x1e>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	b103      	cbz	r3, 8003836 <_lseek_r+0x1e>
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	200042b4 	.word	0x200042b4

0800383c <__malloc_lock>:
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <__malloc_lock+0x8>)
 800383e:	f7ff be43 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	200042ac 	.word	0x200042ac

08003848 <__malloc_unlock>:
 8003848:	4801      	ldr	r0, [pc, #4]	; (8003850 <__malloc_unlock+0x8>)
 800384a:	f7ff be3e 	b.w	80034ca <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	200042ac 	.word	0x200042ac

08003854 <_read_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d07      	ldr	r5, [pc, #28]	; (8003874 <_read_r+0x20>)
 8003858:	4604      	mov	r4, r0
 800385a:	4608      	mov	r0, r1
 800385c:	4611      	mov	r1, r2
 800385e:	2200      	movs	r2, #0
 8003860:	602a      	str	r2, [r5, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7fd f801 	bl	800086a <_read>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_read_r+0x1e>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_read_r+0x1e>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	200042b4 	.word	0x200042b4

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
